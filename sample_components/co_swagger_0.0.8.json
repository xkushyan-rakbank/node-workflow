{
  "swagger": "2.0",
  "info": {
    "version": "0.0.8",
    "title": "Customer Onboarding At RAK Bank",
    "termsOfService": "http://rakbank.ae/api/terms/",
    "contact": {
      "email": "api-support@rakbank.ae"
    },
    "description": "A typical customer onboarding process involves multiple activities. It starts with evaluating the customer's requirement, followed by due-diligence, completion of legal aspects, account opening and making it operational."
  },
  "host": "rakbank.ae",
  "basePath": "/api/customer-onboarding/v1",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/banks/RAK/usertypes/{userType}/datalist": {
      "get": {
        "summary": "Get list of values with group Ids",
        "operationId": "getDatalist",
        "tags": [
          "Get Datalist"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "sme",
              "retail",
              "corporate"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DatalistResponse"
            }
          },
          "400": {
            "description": "Invalid userType"
          },
          "500": {
            "description": "500 is the generic REST API error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/banks/RAK/usertypes/sme/prospects/": {
      "post": {
        "summary": "post a prospect for SME accounts and services ",
        "operationId": "createSMEProspect",
        "tags": [
          "Onboard SME Customer"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SmeProspect object to create new prospect",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmeProspect"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully saved prospect details",
            "schema": {
              "$ref": "#/definitions/SmeProspectResponse"
            }
          },
          "400": {
            "description": "400 is the generic client-side error status. Errors can be like malformed request syntax, invalid request message parameters etc. ",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "500 is the generic REST API error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/banks/RAK/usertypes/{userType}/prospects/search": {
      "post": {
        "summary": "search prospect by usertype, mobileNo, leadNumber",
        "operationId": "searchProspect",
        "tags": [
          "Search Prospect"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userType",
            "in": "path",
            "required": true,
            "description": "usertype e.g. sme, retail, corporate",
            "type": "string",
            "enum": [
              "sme",
              "retail",
              "corporate"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "search prospect",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchProspectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SearchProspectResponse"
            }
          },
          "400": {
            "description": "Invalid prospectId",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "500 is the generic REST API error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/banks/RAK/usertypes/sme/prospects/{prospectId}": {
      "get": {
        "summary": "Get prospect by prospectId",
        "operationId": "getSMEProspectById",
        "tags": [
          "Get SME Prospect"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "prospectId",
            "in": "path",
            "required": true,
            "description": "The id of the prospect to retrieve",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SmeProspect"
            }
          },
          "400": {
            "description": "Invalid prospectId",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "500 is the generic REST API error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing prospect by prospectId",
        "operationId": "updateSMEProspect",
        "tags": [
          "Update SME Prospect"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "prospectId",
            "in": "path",
            "required": true,
            "description": "The id of the prospect to update",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "SmeProspect object to update existing prospect",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmeProspect"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully updated prospect details",
            "schema": {
              "$ref": "#/definitions/SmeProspectResponse"
            }
          },
          "400": {
            "description": "400 is the generic client-side error status. Errors can be like malformed request syntax, invalid request message parameters etc. ",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "500 is the generic REST API error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/banks/RAK/prospects/{prospectId}/documents": {
      "post": {
        "summary": "first time upload of the documents for the given prospect for accounts and services ",
        "operationId": "uploadDocument",
        "tags": [
          "Upload Prospect Document"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "prospectId",
            "in": "path",
            "required": true,
            "description": "The id of the prospect for which documents are to be uploaded",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "ProspectDocument object to update existing prospect documents",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProspectDocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "upload successful",
            "schema": {
              "$ref": "#/definitions/UploadDocumentResponse"
            }
          },
          "400": {
            "description": "400 is the generic client-side error status. Errors can be like malformed request syntax, invalid request message parameters etc.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "500 is the generic REST API error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "summary": "Get documents uploaded against the given prospectId",
        "operationId": "getDocumentsByProspectId",
        "tags": [
          "Get Prospect Documents"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "prospectId",
            "in": "path",
            "required": true,
            "description": "The id of the prospect for which documents are to be retrieved",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProspectDocuments"
            }
          },
          "400": {
            "description": "Invalid prospectId",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "500 is the generic REST API error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "summary": "Update the documents for an existing prospect by prospectId",
        "operationId": "reuploadDocument",
        "tags": [
          "Reupload Document"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "prospectId",
            "in": "path",
            "required": true,
            "description": "The id of the prospect for which documents are to be updated",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "ProspectDocument object to update existing prospect documents",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProspectDocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "upload successful",
            "schema": {
              "$ref": "#/definitions/UploadDocumentResponse"
            }
          },
          "400": {
            "description": "400 is the generic client-side error status. Errors can be like malformed request syntax, invalid request message parameters etc. ",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "500 is the generic REST API error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/banks/RAK/prospects/{prospectId}/documents/{documentId}": {
      "get": {
        "summary": "get document by documentId",
        "operationId": "getDocumentById",
        "tags": [
          "Get Document by Id"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "prospectId",
            "in": "path",
            "required": true,
            "description": "The id of the prospect",
            "type": "string"
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "description": "The id of the document",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "return document",
            "schema": {
              "$ref": "#/definitions/ProspectDocument"
            }
          },
          "400": {
            "description": "400 is the generic client-side error status. Errors can be like malformed request syntax, invalid request message parameters etc.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "500 is the generic REST API error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/banks/RAK/prospects/{prospectId}/screening": {
      "get": {
        "summary": "performs blacklist, negation, dedupe checks and calculate risk score",
        "operationId": "performPreScreening",
        "tags": [
          "Pre Screening"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "prospectId",
            "in": "path",
            "required": true,
            "description": "The id of the prospect",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "return screening result",
            "schema": {
              "$ref": "#/definitions/PreScreeningInfo"
            }
          },
          "400": {
            "description": "400 is the generic client-side error status. Errors can be like malformed request syntax, invalid request message parameters etc.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "500 is the generic REST API error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/banks/RAK/users/authenticate": {
      "post": {
        "summary": "login to back office application with valid username & password",
        "operationId": "login",
        "tags": [
          "Login to Back Office Application"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LoginRequest object for username and password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "login successful",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "400": {
            "description": "400 is the generic client-side error status. Errors can be like malformed request syntax, invalid request message parameters etc.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "500 is the generic REST API error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/banks/RAK/legal/documents/{documentTitle}": {
      "get": {
        "summary": "get terms and conditions document",
        "operationId": "getDocumentByTitle",
        "tags": [
          "Get T&C Document"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "documentTitle",
            "in": "path",
            "required": true,
            "description": "name of the document",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "return document",
            "schema": {
              "$ref": "#/definitions/ProspectDocument"
            }
          },
          "400": {
            "description": "Invalid document name",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "500 is the generic REST API error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/banks/RAK/otp": {
      "post": {
        "summary": "API for validating Auth Mode",
        "operationId": "sendVerifyOTP",
        "tags": [
          "Send, Resend or Verify OTP"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "OTPRequest object to send or verify the OTP",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OTPRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP verified",
            "schema": {
              "$ref": "#/definitions/VerifyOTPResponse"
            }
          },
          "201": {
            "description": "OTP generated",
            "schema": {
              "$ref": "#/definitions/GenerateOTPResponse"
            }
          },
          "400": {
            "description": "400 is the generic client-side error status. Errors can be like malformed request syntax, invalid request message parameters etc.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "500 is the generic REST API error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/banks/RAK/recaptcha/verify": {
      "post": {
        "summary": "Verify reCaptcha token",
        "operationId": "verifyCaptcha",
        "tags": [
          "reCaptcha"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "OTPRequest object to send or verify the OTP",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReCaptchaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP verified",
            "schema": {
              "$ref": "#/definitions/ReCaptchaResponse"
            }
          },
          "400": {
            "description": "400 is the generic client-side error status. Errors can be like malformed request syntax, invalid request message parameters etc.",
            "schema": {
              "$ref": "#/definitions/ReCaptchaResponse"
            }
          },
          "500": {
            "description": "500 is the generic REST API error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "LoginResponse": {
      "type": "object",
      "properties": {
        "agentName": {
          "type": "string"
        },
        "agentRole": {
          "type": "string"
        },
        "deptName": {
          "type": "string"
        }
      }
    },
    "GenerateOTPResponse": {
      "type": "object",
      "properties": {
        "mode": {
          "type": "string",
          "enum": [
            "email",
            "sms",
            "both"
          ]
        },
        "otpTokenValidityInSec": {
          "type": "integer"
        },
        "otpTokenValidUntil": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ProspectStatusInfo": {
      "type": "object",
      "required": [
        "statusType",
        "statusFlag",
        "statusReason",
        "statusOverAll",
        "reasonCode",
        "reasonStatus"
      ],
      "properties": {
        "statusType": {
          "type": "string",
          "description": ""
        },
        "statusCode": {
          "type": "string",
          "description": ""
        },
        "statusFlag": {
          "type": "string",
          "description": ""
        },
        "statusNotes": {
          "type": "string",
          "description": ""
        },
        "statusReason": {
          "type": "string",
          "description": ""
        },
        "statusOverAll": {
          "type": "string",
          "description": ""
        },
        "reasonNotes": {
          "type": "string",
          "description": ""
        },
        "reasonCode": {
          "type": "string",
          "description": ""
        },
        "reasonStatus": {
          "type": "string",
          "description": ""
        }
      }
    },
    "PreScreeningInfo": {
      "type": "object",
      "properties": {
        "statusOverAll": {
          "type": "string",
          "enum": [
            "proceed",
            "stop"
          ]
        },
        "screeningResults": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "screeningType": {
                "type": "string",
                "description": ""
              },
              "screeningStatus": {
                "type": "string",
                "description": ""
              },
              "screeningFlag": {
                "type": "string",
                "description": ""
              },
              "screeningNotes": {
                "type": "string",
                "description": ""
              },
              "screeningReason": {
                "type": "string",
                "description": ""
              },
              "reasonNotes": {
                "type": "string",
                "description": ""
              },
              "reasonCode": {
                "type": "string",
                "description": ""
              },
              "reasonStatus": {
                "type": "string",
                "description": ""
              }
            }
          }
        }
      }
    },
    "VerifyOTPResponse": {
      "type": "object",
      "properties": {
        "verified": {
          "type": "boolean"
        },
        "prospects": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "_links": {
                "type": "object",
                "properties": {
                  "self": {
                    "type": "object",
                    "properties": {
                      "href": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "prospectId": {
                "type": "string"
              },
              "fullName": {
                "type": "string",
                "description": "name of the applicant",
                "maxLength": 240,
                "pattern": "^[a-zA-Z]*$"
              },
              "email": {
                "type": "string",
                "description": "email Id of the applicant",
                "format": "email",
                "maxLength": 50
              },
              "countryCode": {
                "type": "string",
                "description": "country code",
                "pattern": "^[0-9]*$",
                "maxLength": 3
              },
              "mobileNo": {
                "type": "string",
                "description": "mobile number",
                "pattern": "^[0-9]*$",
                "maxLength": 15
              }
            }
          }
        }
      }
    },
    "UploadDocumentResponse": {
      "type": "object",
      "properties": {
        "filepath": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "_links": {
          "type": "object",
          "properties": {
            "self": {
              "type": "object",
              "properties": {
                "href": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "AuditTrailInfo": {
      "type": "array",
      "items": {
        "properties": {
          "fieldName": {
            "type": "string"
          },
          "modifiedBy": {
            "type": "string"
          },
          "modifiedDateTime": {
            "type": "string",
            "format": "DateTime"
          }
        }
      }
    },
    "SearchProspectResponse": {
      "type": "object",
      "properties": {
        "searchResult": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "prospectId": {
                "type": "string"
              },
              "_links": {
                "type": "object",
                "properties": {
                  "self": {
                    "type": "object",
                    "properties": {
                      "href": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "status": {
                "$ref": "#/definitions/ProspectStatusInfo"
              },
              "preScreeningInfo": {
                "$ref": "#/definitions/PreScreeningInfo"
              },
              "auditTrail": {
                "$ref": "#/definitions/AuditTrailInfo"
              },
              "applicationInfo": {
                "type": "object",
                "properties": {
                  "viewId": {
                    "type": "string"
                  },
                  "actionType": {
                    "type": "string",
                    "default": "Save",
                    "enum": [
                      "save",
                      "submit"
                    ]
                  }
                }
              },
              "organizationInfo": {
                "type": "object",
                "properties": {
                  "licenseNumber": {
                    "type": "string"
                  },
                  "companyName": {
                    "type": "string"
                  }
                }
              },
              "applicantInfo": {
                "type": "object",
                "properties": {
                  "fullName": {
                    "type": "string",
                    "description": "name of the applicant",
                    "maxLength": 240,
                    "pattern": "^[a-zA-Z]*$"
                  },
                  "email": {
                    "type": "string",
                    "description": "email Id of the applicant",
                    "format": "email",
                    "maxLength": 50
                  },
                  "countryCode": {
                    "type": "string",
                    "description": "country code",
                    "pattern": "^[0-9]*$",
                    "maxLength": 3
                  },
                  "mobileNo": {
                    "type": "string",
                    "description": "mobile number",
                    "pattern": "^[0-9]*$",
                    "maxLength": 15
                  }
                }
              }
            }
          }
        }
      }
    },
    "SearchProspectRequest": {
      "type": "object",
      "properties": {
        "fname": {
          "type": "string",
          "maxLength": 50
        },
        "countryCode": {
          "type": "string",
          "description": "country code",
          "pattern": "^[0-9]*$",
          "maxLength": 3
        },
        "mobileNo": {
          "type": "string",
          "description": "mobile number",
          "pattern": "^[0-9]*$",
          "maxLength": 15
        },
        "leadNumber": {
          "type": "string",
          "description": "RAK track lead generated by the system e.g. ABCD",
          "maxLength": 9999
        },
        "tradeLicenseNo": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9]*$",
          "maxLength": 20
        },
        "email": {
          "type": "string",
          "description": "email Id of the applicant",
          "format": "email",
          "maxLength": 50
        },
        "eidNumber": {
          "type": "string",
          "maxLength": 15,
          "pattern": "^[0-9]*$"
        }
      }
    },
    "SmeProspectResponse": {
      "type": "object",
      "properties": {
        "accountInfo": {
          "type": "array",
          "items": {
            "properties": {
              "accountNo": {
                "type": "string"
              },
              "currency": {
                "type": "string"
              }
            }
          }
        },
        "prospectId": {
          "type": "string",
          "maxLength": 50
        },
        "_links": {
          "type": "object",
          "properties": {
            "self": {
              "type": "object",
              "properties": {
                "href": {
                  "type": "string"
                }
              }
            }
          }
        },
        "preScreening": {
          "$ref": "#/definitions/PreScreeningInfo"
        }
      }
    },
    "SignatoriesKYCDetails": {
      "type": "object",
      "required": [
        "shareholderPOASignatoryName",
        "shareholdingPercentage",
        "dateOfBirth",
        "nationality",
        "dualCitizenship",
        "residenceCountry",
        "isUAEResident",
        "passportDetails",
        "selfGovtPosition",
        "relativeGovtPosition"
      ],
      "properties": {
        "salutation": {
          "type": "string",
          "enum": [
            "Mr.",
            "Mrs.",
            "Ms."
          ]
        },
        "shareholderPOASignatoryName": {
          "type": "string",
          "maxLength": 80,
          "pattern": "^[a-zA-Z]*$"
        },
        "isSignatory": {
          "type": "boolean",
          "default": false
        },
        "isShareholder": {
          "type": "boolean",
          "default": false
        },
        "shareHoldingPercentage": {
          "type": "integer",
          "description": "Mandatory for shareholders (isShareholder).",
          "maximum": 100
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date"
        },
        "nationality": {
          "type": "string",
          "maxLength": 50,
          "pattern": "^[a-zA-Z]*$"
        },
        "dualCitizenship": {
          "type": "boolean",
          "default": false
        },
        "dualCitizenshipCountry": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "LOVs to be fetched from datalist API"
            ]
          }
        },
        "residenceCountry": {
          "type": "string",
          "default": "AE",
          "description": "Defaulted for signatories/POA (isSignatory)",
          "enum": [
            "LOVs to be fetched from datalist API"
          ]
        },
        "isUAEResident": {
          "type": "boolean",
          "default": false,
          "description": "Defaulted as true for signatories/POA (isSignatory)"
        },
        "passportDetails": {
          "type": "array",
          "items": {
            "required": [
              "passportNumber"
            ],
            "properties": {
              "passportNumber": {
                "type": "string",
                "maxLength": 100,
                "pattern": "^[a-zA-Z0-9]*$"
              },
              "passportExpiryDate": {
                "type": "string",
                "format": "date"
              },
              "diplomatPassport": {
                "type": "boolean",
                "default": false
              }
            }
          }
        },
        "emirateIdDetails": {
          "type": "object",
          "description": "Mandatory if residenceCountry is AE",
          "required": [
            "eidNumber"
          ],
          "properties": {
            "eidNumber": {
              "type": "string",
              "maxLength": 15,
              "pattern": "^[0-9]*$"
            },
            "eidExpiryDt": {
              "type": "string",
              "format": "date"
            }
          }
        },
        "selfGovtPosition": {
          "type": "string",
          "enum": [
            "Currently hold",
            "Held in last 5 years",
            "Held more than 5 years back",
            "Never help"
          ]
        },
        "relativeGovtPosition": {
          "type": "string",
          "enum": [
            "Currently hold",
            "Held in last 5 years",
            "Held more than 5 years back",
            "Never held"
          ]
        },
        "qualification": {
          "type": "string",
          "description": "Defaulted as true for signatories/POA (isSignatory)",
          "enum": [
            "Under Graduate",
            "Graduate",
            "Post Graduate"
          ]
        },
        "experienceInYrs": {
          "type": "string",
          "maxLength": 2,
          "pattern": "^[0-9]*$",
          "description": "Defaulted as true for signatories/POA (isSignatory)"
        },
        "sourceOfWealth": {
          "type": "object",
          "description": "Defaulted as true for signatories/POA (isSignatory)",
          "required": [
            "wealthType"
          ],
          "properties": {
            "wealthType": {
              "type": "string",
              "enum": [
                "Personal Savings",
                "Profit from Other Business",
                "Family Funds",
                "Others"
              ]
            },
            "others": {
              "type": "string",
              "maxLength": 50,
              "pattern": "^[a-zA-Z. ]*$"
            }
          }
        }
      }
    },
    "OrgKYCDetails": {
      "type": "object",
      "required": [
        "businessUnit",
        "constitutionType",
        "annualFinTurnoverAmtInAED",
        "yearsInBusiness",
        "anticipatedTransactionsDetails",
        "otherBankingRelationshipsInfo",
        "isShareholderACompany"
      ],
      "properties": {
        "businessUnit": {
          "type": "string",
          "enum": [
            "PBD",
            "WM",
            "CBD",
            "SME",
            "PSL",
            "Merchant Acquiring"
          ]
        },
        "constitutionType": {
          "type": "string",
          "enum": [
            "Proprietorship",
            "Partnership",
            "Free Zone",
            "LLC",
            "Foreign Co",
            "Br of Foreign Co",
            "Under Formation",
            "Clubs, Associates or Societies"
          ]
        },
        "companyCategory": {
          "type": "string",
          "description": "get the values from datalist API. RO flag for special cases to be discussed with Vartika.",
          "enum": [
            "Charitable Trust",
            "Educational Institute - Government owned",
            "Educational Institute - Private owned",
            "Foreign company - Private Limited",
            "Foreign company - Public Limited",
            "Free zone Companies",
            "General Partnership",
            "Government related entities",
            "Govt. Owned other Financial Institute",
            "Investment Broker & Dealer",
            "Limited Liability Company (LLC)",
            "Local Branch of a Foreign Company",
            "Non-Resident Company",
            "Off-shore entities",
            "Partnerships",
            "Private Joint Stock company",
            "Public Joint stock company",
            "Ruling Family",
            "Security Broker & Dealer",
            "Societies/Trusts/Clubs",
            "Sole proprietorship",
            "Under formation companies"
          ]
        },
        "annualFinTurnoverAmtInAED": {
          "type": "string",
          "format": "amount"
        },
        "yearsInBusiness": {
          "type": "integer",
          "pattern": "^[0-9]*$"
        },
        "topCustomers": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "country"
            ],
            "properties": {
              "name": {
                "type": "string",
                "maxLength": 80,
                "pattern": "^[a-zA-Z ]*$"
              },
              "country": {
                "type": "string",
                "enum": [
                  "LOVs to be fetched from datalist API"
                ]
              }
            }
          }
        },
        "topSuppliers": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "country"
            ],
            "properties": {
              "name": {
                "type": "string",
                "maxLength": 80,
                "pattern": "^[a-zA-Z ]*$"
              },
              "country": {
                "type": "string",
                "enum": [
                  "LOVs to be fetched from datalist API"
                ]
              }
            }
          }
        },
        "topOriginGoodsCountries": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "LOVs to be fetched from datalist API"
            ]
          }
        },
        "industryMultiSelect": {
          "type": "array",
          "description": "To be discussed. Field structure may change",
          "items": {
            "properties": {
              "industry": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "LOVs to be shared by Bank"
                  ]
                }
              },
              "subCategory": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "LOVs to be shared by Bank"
                  ]
                }
              }
            }
          }
        },
        "anticipatedTransactionsDetails": {
          "type": "object",
          "required": [
            "totalMonthlyCashCreditsAED",
            "totalMonthlyNonCashCreditsAED",
            "totalMonthlyCreditsAED",
            "maxAmtSingleTxnCashAED",
            "maxAmtSingleTxnNonCashAED"
          ],
          "properties": {
            "totalMonthlyCashCreditsAED": {
              "type": "object",
              "required": [
                "amountInFigures",
                "inPercent"
              ],
              "properties": {
                "amountInFigures": {
                  "type": "string",
                  "format": "amount"
                },
                "inPercent": {
                  "type": "integer",
                  "maximum": 100
                }
              }
            },
            "totalMonthlyNonCashCreditsAED": {
              "type": "object",
              "required": [
                "amountInFigures",
                "inPercent"
              ],
              "properties": {
                "amountInFigures": {
                  "type": "string",
                  "format": "amount"
                },
                "inPercent": {
                  "type": "integer",
                  "maximum": 100
                }
              }
            },
            "totalMonthlyCreditsAED": {
              "type": "string",
              "format": "amount"
            },
            "maxAmtSingleTxnCashAED": {
              "type": "string",
              "format": "amount"
            },
            "maxAmtSingleTxnNonCashAED": {
              "type": "string",
              "format": "amount"
            }
          }
        },
        "otherBankingRelationshipsInfo": {
          "type": "object",
          "required": [
            "otherBankingRelationshipsExist"
          ],
          "properties": {
            "otherBankingRelationshipsExist": {
              "type": "boolean",
              "default": false
            },
            "otherBankDetails": {
              "type": "array",
              "items": {
                "required": [
                  "bankName"
                ],
                "properties": {
                  "bankName": {
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^[a-zA-Z. ]*$"
                  }
                }
              }
            }
          }
        },
        "otherEntitiesInUAE": {
          "type": "boolean",
          "default": false
        },
        "entitiesInUAE": {
          "type": "array",
          "items": {
            "required": [
              "companyName",
              "emirate",
              "tradeLicenseNo"
            ],
            "properties": {
              "companyName": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9 ]*$",
                "maxLength": 50
              },
              "emirate": {
                "type": "string",
                "enum": [
                  "LOVs to be fetched from data list API"
                ]
              },
              "tradeLicenseNo": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9]*$",
                "maxLength": 20
              }
            }
          }
        },
        "otherEntitiesOutsideUAE": {
          "type": "boolean",
          "default": false
        },
        "entitiesOutsideUAE": {
          "type": "array",
          "items": {
            "required": [
              "companyName",
              "country",
              "tradeLicenseNo"
            ],
            "properties": {
              "companyName": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9 ]*$",
                "maxLength": 50
              },
              "country": {
                "type": "string",
                "enum": [
                  "LOVs to be fetched from data list API"
                ]
              }
            }
          }
        },
        "isShareholderACompany": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "AuthenticateRequest": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "username": {
          "type": "string",
          "description": "username",
          "pattern": "^[a-zA-Z0-9.]*$",
          "maxLength": 65
        },
        "password": {
          "type": "string",
          "description": "password",
          "pattern": "^[a-zA-Z0-9#@_]*$",
          "maxLength": 30
        }
      }
    },
    "ReCaptchaRequest": {
      "type": "object",
      "properties": {
        "recaptchaToken": {
          "type": "string"
        }
      }
    },
    "ReCaptchaResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "challengeTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "hostname": {
          "type": "string"
        },
        "errorCodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "OTPRequest": {
      "type": "object",
      "required": [
        "countryCode",
        "mobileNo",
        "action"
      ],
      "properties": {
        "prospectId": {
          "type": "string",
          "maxLength": 50
        },
        "countryCode": {
          "type": "string",
          "description": "country code",
          "pattern": "^[0-9]*$",
          "maxLength": 3
        },
        "mobileNo": {
          "type": "string",
          "description": "mobile number",
          "pattern": "^[0-9]*$",
          "maxLength": 15
        },
        "email": {
          "type": "string",
          "description": "email Id of the applicant",
          "format": "email",
          "maxLength": 50
        },
        "action": {
          "type": "string",
          "description": "send, resend, or verify the OTP",
          "enum": [
            "generate",
            "verify"
          ]
        },
        "otpToken": {
          "type": "string",
          "description": "numeric OTP token",
          "pattern": "^[0-9]*$",
          "maxLength": 6
        }
      }
    },
    "DatalistResponse": {
      "type": "object",
      "required": [
        "GroupId"
      ],
      "properties": {
        "groupId": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "key",
              "value",
              "description"
            ],
            "properties": {
              "code": {
                "type": "string"
              },
              "key": {
                "type": "string",
                "description": "save value"
              },
              "value": {
                "type": "string"
              },
              "displayText": {
                "type": "string"
              },
              "subGroup": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "key",
                    "value",
                    "description"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "key": {
                      "type": "string",
                      "description": "save value"
                    },
                    "value": {
                      "type": "string"
                    },
                    "displayText": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "SmeProspect": {
      "type": "object",
      "required": [
        "applicantInfo",
        "applicationInfo",
        "accountInfo",
        "organizationInfo",
        "generalInfo",
        "signatoryInfo",
        "channelServicesInfo",
        "documents",
        "orgKYCDetails",
        "freeFieldsInfo"
      ],
      "properties": {
        "applicantInfo": {
          "type": "object",
          "required": [
            "fullName",
            "email",
            "countryCode",
            "mobileNo"
          ],
          "properties": {
            "fullName": {
              "type": "string",
              "description": "name of the applicant",
              "maxLength": 240,
              "pattern": "^[a-zA-Z]*$"
            },
            "email": {
              "type": "string",
              "description": "email Id of the applicant",
              "format": "email",
              "maxLength": 50
            },
            "countryCode": {
              "type": "string",
              "description": "country code",
              "pattern": "^[0-9]*$",
              "maxLength": 3
            },
            "mobileNo": {
              "type": "string",
              "description": "mobile number",
              "pattern": "^[0-9]*$",
              "maxLength": 15
            },
            "applyOnbehalf": {
              "type": "boolean",
              "description": "apply on behalf of someone's company"
            }
          }
        },
        "generalInfo": {
          "type": "object",
          "required": [
            "customerType"
          ],
          "properties": {
            "prospectId": {
              "type": "string",
              "maxLength": 50
            },
            "_links": {
              "type": "object",
              "properties": {
                "self": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "cifId": {
              "type": "number",
              "maxLength": 7
            },
            "customerType": {
              "type": "string",
              "default": "SME"
            },
            "dsaId": {
              "type": "string",
              "maxLength": 12,
              "default": "ZZZ999"
            },
            "groupId": {
              "type": "string",
              "maxLength": 50
            },
            "groupName": {
              "type": "string",
              "maxLength": 200
            },
            "rmCode": {
              "type": "string",
              "maxLength": 100
            },
            "accountManagerId": {
              "type": "string",
              "maxLength": 30
            },
            "isPoliticallyExposed": {
              "type": "string",
              "default": "N",
              "enum": [
                "Y",
                "N"
              ]
            }
          }
        },
        "applicationInfo": {
          "type": "object",
          "required": [
            "viewId",
            "channelId",
            "createdDate",
            "createdBy",
            "lastModifiedDate",
            "lastModifiedBy",
            "actionType",
            "saveType"
          ],
          "properties": {
            "viewId": {
              "type": "string",
              "description": "last visited page on mobile/web apply application",
              "maxLength": 100
            },
            "islamicBanking": {
              "type": "boolean",
              "description": "conventional or islamic banking"
            },
            "accountType": {
              "type": "string",
              "description": "RAKStarter, Current Account, RAKelite",
              "enum": [
                "RAKStarter",
                "Current Account",
                "RAKelite"
              ]
            },
            "rakValuePackage": {
              "type": "string",
              "enum": [
                "RAKvalue PLUS",
                "RAKvalue MAX"
              ]
            },
            "leadNumber": {
              "type": "string",
              "description": "RAK track lead generated by the system e.g. ABCD",
              "maxLength": 9999
            },
            "riskScore": {
              "type": "string",
              "description": "calculate risk score in pre screenig step"
            },
            "srNumber": {
              "type": "string",
              "description": "Service Request Number generated by Finacle Core e.g. SR1234567",
              "maxLength": 30
            },
            "channelId": {
              "type": "string",
              "description": "needs to be discussed...",
              "enum": [
                "Bank to confirm on the LOVs"
              ]
            },
            "channelType": {
              "type": "string",
              "enum": [
                "Mobile",
                "Browser",
                "Other"
              ]
            },
            "createdDate": {
              "type": "string",
              "description": "system date time",
              "format": "dateTime"
            },
            "lastModifiedDate": {
              "type": "string",
              "description": "system date time",
              "format": "dateTime"
            },
            "createdBy": {
              "type": "string",
              "description": "prospectId if created by customer"
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "Id of sales agent or modifier"
            },
            "actionType": {
              "type": "string",
              "default": "Save",
              "enum": [
                "save",
                "submit"
              ]
            },
            "saveType": {
              "type": "string",
              "description": "event driven or auto",
              "default": "auto",
              "enum": [
                "auto",
                "continue",
                "next"
              ]
            },
            "tncAgreed": {
              "type": "boolean",
              "default": false
            },
            "declaration": {
              "type": "boolean",
              "default": true
            }
          }
        },
        "accountInfo": {
          "type": "array",
          "items": {
            "required": [
              "branchId",
              "accountType",
              "accountCurrency"
            ],
            "properties": {
              "branchId": {
                "type": "string",
                "description": "branch selected by customer",
                "enum": [
                  "LOVs will be fetched from datalist API"
                ]
              },
              "accountType": {
                "type": "string",
                "description": "Get account types from datalist api",
                "enum": [
                  "Segment of the user to be checked with Vartika, coz based upon that account scheme code wil vary"
                ]
              },
              "accountSubType": {
                "type": "string",
                "description": "Get account types from datalist api",
                "enum": [
                  "Segment of the user to be checked with Vartika, coz based upon that account scheme code wil vary"
                ]
              },
              "accountNo": {
                "type": "string"
              },
              "accountCurrencies": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Multi-selection of currency",
                "enum": [
                  "AED",
                  "GBP",
                  "USD",
                  "EUR"
                ]
              },
              "accountCurrency": {
                "type": "string",
                "default": "AED",
                "description": "account currency",
                "enum": [
                  "AED",
                  "GBP",
                  "USD",
                  "EUR"
                ]
              },
              "accountPurpose": {
                "type": "string",
                "description": "Purpose of Account",
                "enum": [
                  "Bank to confirm on the LOVs"
                ]
              },
              "debitCardApplied": {
                "type": "boolean",
                "default": true,
                "description": "If non-AED currency account is selected, then it will be false."
              },
              "chequeBookApplied": {
                "type": "boolean",
                "default": true,
                "description": "If non-AED currency account is selected, then it will be false."
              },
              "eStatements": {
                "type": "boolean",
                "default": true
              },
              "mailStatements": {
                "type": "boolean",
                "default": false
              },
              "receiveInterest": {
                "type": "boolean",
                "default": true
              },
              "deliverByCourier": {
                "type": "boolean",
                "default": true
              }
            }
          }
        },
        "organizationInfo": {
          "type": "object",
          "required": [
            "branchCity",
            "branchID",
            "companyName",
            "countryOfIncorporation",
            "countryOfDomicile",
            "dateOfIncorporation",
            "licenseIssuingAuthority",
            "licenseNumber",
            "licenseIssueDate",
            "addressInfo",
            "contactDetails"
          ],
          "properties": {
            "screeningInfo": {
              "$ref": "#/definitions/PreScreeningInfo"
            },
            "branchCity": {
              "type": "string",
              "description": "get the values from datalist API",
              "enum": [
                "LOVs to be confirmed by Bank"
              ]
            },
            "branchID": {
              "type": "string",
              "description": "get the values from datalist API",
              "enum": [
                "LOVs to be confirmed by Bank"
              ]
            },
            "countryOfIncorporation": {
              "type": "string",
              "description": "get the values from datalist API",
              "maxLength": 2,
              "default": "AE",
              "enum": [
                "CRM country list"
              ]
            },
            "companyName": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9 ]*$",
              "maxLength": 50
            },
            "shortName": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9 ]*$",
              "maxLength": 10
            },
            "dateOfIncorporation": {
              "type": "string",
              "format": "date"
            },
            "numberOfEmployees": {
              "type": "integer",
              "maximum": 6,
              "pattern": "^[0-9]*$"
            },
            "licenseType": {
              "type": "string",
              "description": "get the values from datalist API. List contains Trade Licence, Certificate of Incorporation and user entered value",
              "enum": [
                "Trade License",
                "Certificate of Inc",
                "Other"
              ]
            },
            "licenseTypeOther": {
              "type": "string",
              "description": "freetext if licenseType is Other",
              "pattern": "^[a-zA-Z ]*$",
              "maxLength": 25
            },
            "licenseIssuingAuthority": {
              "type": "string",
              "description": "get the values from datalist API",
              "enum": [
                "LOVs to be confirmed by Bank"
              ]
            },
            "licenseNumber": {
              "type": "string",
              "description": "Trade Licence or Certificate of Incorporation and user entered value",
              "pattern": "^[a-zA-Z0-9]*$",
              "maxLength": 20
            },
            "licenseIssueDate": {
              "type": "string",
              "format": "date"
            },
            "licenseExpiryDate": {
              "type": "string",
              "format": "date"
            },
            "vatRegistrationNumber": {
              "type": "string",
              "description": "Company's VAT Registration No.",
              "pattern": "^[a-zA-Z0-9]*$",
              "maxLength": 12
            },
            "addressInfo": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "typeOfAddress",
                  "addressDetails"
                ],
                "properties": {
                  "typeOfAddress": {
                    "type": "string",
                    "enum": [
                      "Registered Address/Head office",
                      "Office Address"
                    ]
                  },
                  "officeAddressDifferent": {
                    "type": "string",
                    "default": "No",
                    "enum": [
                      "Yes",
                      "No"
                    ]
                  },
                  "addressDetails": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "addressFieldDesc",
                        "preferredAddress",
                        "addressLine1",
                        "poBox",
                        "emirateCity",
                        "country",
                        "typeOfSpaceOccupied"
                      ],
                      "properties": {
                        "addressFieldDesc": {
                          "type": "string",
                          "enum": [
                            "Registered Address/Head office",
                            "Office Address"
                          ]
                        },
                        "preferredAddress": {
                          "type": "string",
                          "enum": [
                            "Yes",
                            "No"
                          ]
                        },
                        "addressLine1": {
                          "type": "string",
                          "description": "Stores the office shop number",
                          "maxLength": 10,
                          "pattern": "^[a-zA-Z0-9\\@\\#\\%\\*\\(\\)]*$"
                        },
                        "addressLine2": {
                          "type": "string",
                          "description": "Stores the street location",
                          "maxLength": 50,
                          "pattern": "^[a-zA-Z0-9\\@\\#\\%\\*\\(\\)]*$"
                        },
                        "addressLine3": {
                          "type": "string",
                          "description": "Stores the building villa name",
                          "maxLength": 50,
                          "pattern": "^[a-zA-Z0-9\\@\\#\\%\\*\\(\\)]*$"
                        },
                        "addressLine4": {
                          "type": "string",
                          "description": "Stores the nearest landmark",
                          "maxLength": 50,
                          "pattern": "^[a-zA-Z0-9\\@\\#\\%\\*\\(\\)]*$"
                        },
                        "poBox": {
                          "type": "string",
                          "description": "Stores the P. O. Box",
                          "maxLength": 100,
                          "pattern": "^[0-9]*$"
                        },
                        "emirateCity": {
                          "type": "string",
                          "description": "Stores the city",
                          "maxLength": 200,
                          "pattern": "^[a-zA-Z]*$"
                        },
                        "country": {
                          "type": "string",
                          "description": "Stores the country code",
                          "default": "AE",
                          "maxLength": 100,
                          "pattern": "^[a-zA-Z]*$"
                        },
                        "typeOfSpaceOccupied": {
                          "type": "object",
                          "description": "To be checked with Vartika whether its needed or not, and whether it will be multi-select or not.",
                          "required": [
                            "spaceType"
                          ],
                          "properties": {
                            "spaceType": {
                              "type": "string",
                              "enum": [
                                "Office",
                                "Warehouse",
                                "Kiosk",
                                "Shop",
                                "Flexidesk",
                                "Other"
                              ]
                            },
                            "others": {
                              "type": "string",
                              "maxLength": 50,
                              "pattern": "^[a-zA-Z. ]*$"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "contactDetails": {
              "type": "object",
              "description": "Contact details where the signatory can be contacted by the bank",
              "required": [
                "primaryMobileNo",
                "primaryMobCountryCode",
                "primaryEmail"
              ],
              "properties": {
                "primaryMobileNo": {
                  "type": "string",
                  "maxLength": 50,
                  "pattern": "^[0-9]*$"
                },
                "primaryMobCountryCode": {
                  "type": "string",
                  "maxLength": 60,
                  "pattern": "^[0-9]*$"
                },
                "primaryEmail": {
                  "type": "string",
                  "format": "email",
                  "maxLength": 50
                },
                "primaryPhoneNo": {
                  "type": "string",
                  "maxLength": 50,
                  "pattern": "^[0-9]*$"
                },
                "primaryPhoneCountryCode": {
                  "type": "string",
                  "maxLength": 60,
                  "pattern": "^[0-9]*$"
                },
                "fax": {
                  "type": "string",
                  "maxLength": 50,
                  "pattern": "^[0-9]*$"
                },
                "faxCountryCode": {
                  "type": "string",
                  "maxLength": 60,
                  "pattern": "^[0-9]*$"
                },
                "secondaryPhoneNo": {
                  "type": "string",
                  "maxLength": 50,
                  "pattern": "^[0-9]*$"
                },
                "secondaryPhoneCountryCode": {
                  "type": "string",
                  "maxLength": 60,
                  "pattern": "^[0-9]*$"
                },
                "secondaryMobileNo": {
                  "type": "string",
                  "maxLength": 50,
                  "pattern": "^[0-9]*$"
                },
                "secondaryMobileCountryCode": {
                  "type": "string",
                  "maxLength": 60,
                  "pattern": "^[0-9]*$"
                },
                "secondaryEmail": {
                  "type": "string",
                  "format": "email",
                  "maxLength": 50
                },
                "website": {
                  "type": "string",
                  "pattern": "^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$",
                  "maxLength": 50
                }
              }
            },
            "contactDetailsForTxnReconfirming": {
              "type": "array",
              "items": {
                "required": [
                  "primaryMobileNo",
                  "primaryMobCountryCode"
                ],
                "properties": {
                  "primaryMobileNo": {
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^[0-9]*$"
                  },
                  "primaryMobCountryCode": {
                    "type": "string",
                    "maxLength": 60,
                    "pattern": "^[0-9]*$"
                  },
                  "primaryPhoneNo": {
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^[0-9]*$"
                  },
                  "primaryPhoneCountryCode": {
                    "type": "string",
                    "maxLength": 60,
                    "pattern": "^[0-9]*$"
                  }
                }
              }
            }
          }
        },
        "orgKYCDetails": {
          "$ref": "#/definitions/OrgKYCDetails"
        },
        "signatoryInfo": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "salutation",
              "firstName",
              "lastName",
              "gender",
              "maritalStatus",
              "occupation",
              "mothersMaidenName",
              "kycDetails",
              "contactDetails",
              "employmentDetails",
              "addressInfo",
              "accountSigningInfo"
            ],
            "properties": {
              "screeningInfo": {
                "$ref": "#/definitions/PreScreeningInfo"
              },
              "salutation": {
                "type": "string",
                "enum": [
                  "Mr.",
                  "Mrs.",
                  "Ms."
                ]
              },
              "signatoryId": {
                "type": "string"
              },
              "firstName": {
                "type": "string",
                "maxLength": 80,
                "pattern": "^[a-zA-Z]*$"
              },
              "middleName": {
                "type": "string",
                "maxLength": 80,
                "pattern": "^[a-zA-Z]*$"
              },
              "lastName": {
                "type": "string",
                "maxLength": 80,
                "pattern": "^[a-zA-Z]*$"
              },
              "shortName": {
                "type": "string",
                "maxLength": 10,
                "pattern": "^[a-zA-Z]*$"
              },
              "fullName": {
                "type": "string",
                "maxLength": 80,
                "pattern": "^[a-zA-Z ]*$"
              },
              "gender": {
                "type": "string",
                "description": "Mandatory for signatories/POA. Not required for shareholders.",
                "enum": [
                  "Male",
                  "Female"
                ]
              },
              "maritalStatus": {
                "type": "string",
                "description": "Mandatory for signatories/POA. Not required for shareholders.",
                "enum": [
                  "Married",
                  "Single",
                  "Others"
                ]
              },
              "maritalStatusOthers": {
                "type": "string",
                "maxLength": 50,
                "pattern": "^[a-zA-Z]*$"
              },
              "occupation": {
                "type": "string",
                "maxLength": 50,
                "pattern": "^[a-zA-Z]*$"
              },
              "mothersMaidenName": {
                "type": "string",
                "description": "Mandatory for signatories/POA. Not required for shareholders.",
                "maxLength": 50,
                "pattern": "^[a-zA-Z]*$"
              },
              "numberOfDependants": {
                "type": "integer",
                "default": 0,
                "pattern": "^[0-9]*$"
              },
              "highestEducationAttained": {
                "type": "string",
                "maxLength": 50,
                "pattern": "^[a-zA-Z. ]*$"
              },
              "employmentStatus": {
                "type": "string",
                "maxLength": 50,
                "pattern": "^[a-zA-Z ]*$"
              },
              "kycVerified": {
                "type": "boolean",
                "default": false
              },
              "kycDetails": {
                "$ref": "#/definitions/SignatoriesKYCDetails"
              },
              "contactDetails": {
                "type": "object",
                "description": "Contact details where the signatory can be contacted by the bank",
                "required": [
                  "primaryMobileNo",
                  "primaryMobCountryCode",
                  "primaryEmail",
                  "primaryPhoneNo",
                  "primaryPhoneCountryCode"
                ],
                "properties": {
                  "primaryMobileNo": {
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^[0-9]*$"
                  },
                  "primaryMobCountryCode": {
                    "type": "string",
                    "maxLength": 60,
                    "pattern": "^[0-9]*$"
                  },
                  "primaryEmail": {
                    "type": "string",
                    "format": "email",
                    "maxLength": 50
                  },
                  "primaryPhoneNo": {
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^[0-9]*$"
                  },
                  "primaryPhoneCountryCode": {
                    "type": "string",
                    "maxLength": 60,
                    "pattern": "^[0-9]*$"
                  },
                  "fax": {
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^[0-9]*$"
                  },
                  "faxCountryCode": {
                    "type": "string",
                    "maxLength": 60,
                    "pattern": "^[0-9]*$"
                  },
                  "secondaryPhoneNo": {
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^[0-9]*$"
                  },
                  "secondaryPhoneCountryCode": {
                    "type": "string",
                    "maxLength": 60,
                    "pattern": "^[0-9]*$"
                  },
                  "secondaryMobileNo": {
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^[0-9]*$"
                  },
                  "secondaryMobileCountryCode": {
                    "type": "string",
                    "maxLength": 60,
                    "pattern": "^[0-9]*$"
                  },
                  "secondaryEmail": {
                    "type": "string",
                    "format": "email",
                    "maxLength": 50
                  },
                  "website": {
                    "type": "string",
                    "pattern": "^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$",
                    "maxLength": 50
                  }
                }
              },
              "employmentDetails": {
                "type": "object",
                "required": [
                  "employmentType",
                  "designation",
                  "employerName"
                ],
                "properties": {
                  "employmentType": {
                    "type": "string",
                    "enum": [
                      "Salaried",
                      "Self-Employed",
                      "Housewife",
                      "Other"
                    ]
                  },
                  "otherEmploymentType": {
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^[a-zA-Z]*$"
                  },
                  "designation": {
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^[a-zA-Z]*$"
                  },
                  "empNo": {
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^[a-zA-Z0-9]*$"
                  },
                  "department": {
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^[a-zA-Z]*$"
                  },
                  "employerName": {
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^[a-zA-Z ]*$"
                  },
                  "occupation": {
                    "type": "string",
                    "maxLength": 50,
                    "pattern": "^[a-zA-Z]*$"
                  },
                  "totalExperienceYrs": {
                    "type": "integer",
                    "default": 0
                  },
                  "employmentStartDate": {
                    "type": "string",
                    "format": "date"
                  }
                }
              },
              "sameAsCompanyAddress": {
                "type": "boolean",
                "default": false
              },
              "addressInfo": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "typeOfAddress",
                    "addressDetails"
                  ],
                  "properties": {
                    "typeOfAddress": {
                      "type": "string",
                      "enum": [
                        "Residence Address",
                        "Office Address"
                      ]
                    },
                    "addressDetails": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "addressFieldDesc",
                          "preferredAddress",
                          "addressLine1",
                          "poBox",
                          "emirateCity",
                          "country"
                        ],
                        "properties": {
                          "addressFieldDesc": {
                            "type": "string",
                            "enum": [
                              "Residence Address",
                              "Office Address"
                            ]
                          },
                          "preferredAddress": {
                            "type": "string",
                            "enum": [
                              "Yes",
                              "No"
                            ]
                          },
                          "addressLine1": {
                            "type": "string",
                            "description": "Stores the office shop number",
                            "maxLength": 10,
                            "pattern": "^[a-zA-Z0-9\\@\\#\\%\\*\\(\\)]*$"
                          },
                          "addressLine2": {
                            "type": "string",
                            "description": "Stores the street location",
                            "maxLength": 50,
                            "pattern": "^[a-zA-Z0-9\\@\\#\\%\\*\\(\\)]*$"
                          },
                          "addressLine3": {
                            "type": "string",
                            "description": "Stores the building villa name",
                            "maxLength": 50,
                            "pattern": "^[a-zA-Z0-9\\@\\#\\%\\*\\(\\)]*$"
                          },
                          "addressLine4": {
                            "type": "string",
                            "description": "Stores the nearest landmark",
                            "maxLength": 50,
                            "pattern": "^[a-zA-Z0-9\\@\\#\\%\\*\\(\\)]*$"
                          },
                          "poBox": {
                            "type": "string",
                            "description": "Stores the P. O. Box",
                            "maxLength": 100,
                            "pattern": "^[0-9]*$"
                          },
                          "emirateCity": {
                            "type": "string",
                            "description": "Stores the city",
                            "maxLength": 200,
                            "pattern": "^[a-zA-Z]*$"
                          },
                          "country": {
                            "type": "string",
                            "description": "Stores the country code",
                            "default": "AE",
                            "maxLength": 100,
                            "pattern": "^[a-zA-Z]*$"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "accountSigningInfo": {
                "type": "object",
                "required": [
                  "accountSigningType"
                ],
                "properties": {
                  "accountSigningType": {
                    "type": "string",
                    "enum": [
                      "Any of us",
                      "All of us",
                      "Others"
                    ]
                  },
                  "accountSigningInstn": {
                    "type": "string",
                    "description": "freetext if accountSigningType is Other. Finacle field mapping to be checked. To be checked with Vartika.",
                    "maxLength": 500,
                    "pattern": "^[a-zA-Z ]*$"
                  },
                  "authorityType": {
                    "type": "string",
                    "enum": [
                      "SP - Sole Proprietor",
                      "POA - Power of Attorney",
                      "PART - Partnership Agreement",
                      "MOA - Memorandum/Articles of Association",
                      "BR - Board Resolution",
                      "SR - Shareholder Resolution"
                    ]
                  }
                }
              },
              "debitCardInfo": {
                "type": "object",
                "required": [
                  "issueDebitCard"
                ],
                "properties": {
                  "issueDebitCard": {
                    "type": "boolean",
                    "default": true
                  },
                  "authSignatoryDetails": {
                    "type": "object",
                    "required": [
                      "fullNameOnPassport"
                    ],
                    "properties": {
                      "fullNameOnPassport": {
                        "type": "string",
                        "maxLength": 19,
                        "pattern": "^[a-zA-Z ]*$"
                      },
                      "nameOnDebitCard": {
                        "type": "string",
                        "maxLength": 80,
                        "pattern": "^[a-zA-Z ]*$"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "channelServicesInfo": {
          "type": "object",
          "properties": {
            "mobileInstructions": {
              "type": "boolean",
              "default": false
            },
            "marketingSMS": {
              "type": "boolean",
              "default": false
            },
            "doNotDisturbHours": {
              "type": "string",
              "description": "donot disturb hours",
              "pattern": "^[a-zA-Z0-9. ]*$"
            },
            "weeklyBalanceNotification": {
              "type": "string",
              "enum": [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            },
            "monthlyBalanceNotification": {
              "type": "integer",
              "maximum": 31
            }
          }
        },
        "documents": {
          "$ref": "#/definitions/ProspectDocuments"
        },
        "prospectStatusInfo": {
          "$ref": "#/definitions/ProspectStatusInfo"
        },
        "freeFieldsInfo": {
          "type": "object",
          "properties": {
            "freeField1": {
              "type": "string",
              "description": "Bank can use this field to populate any additional data",
              "maxLength": 80,
              "pattern": "^[a-zA-Z0-9. ]*$"
            },
            "freeField2": {
              "type": "string",
              "description": "Bank can use this field to populate any additional data",
              "maxLength": 80,
              "pattern": "^[a-zA-Z0-9. ]*$"
            },
            "freeField3": {
              "type": "string",
              "description": "Bank can use this field to populate any additional data",
              "maxLength": 80,
              "pattern": "^[a-zA-Z0-9. ]*$"
            },
            "freeField4": {
              "type": "string",
              "description": "Bank can use this field to populate any additional data",
              "maxLength": 80,
              "pattern": "^[a-zA-Z0-9. ]*$"
            },
            "freeField5": {
              "type": "string",
              "description": "Bank can use this field to populate any additional data",
              "maxLength": 80,
              "pattern": "^[a-zA-Z0-9. ]*$"
            }
          }
        }
      }
    },
    "ProspectDocuments": {
      "type": "object",
      "properties": {
        "companyDocuments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProspectDocument"
          }
        },
        "stakeholdersDocuments": {
          "type": "object",
          "properties": {
            "index_stakeholderName": {
              "type": "object",
              "properties": {
                "documents": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ProspectDocument"
                  }
                }
              }
            }
          }
        }
      }
    },
    "ProspectDocument": {
      "type": "object",
      "required": [
        "documentType",
        "fileName",
        "fileData",
        "fileFormat",
        "fileDescription",
        "submittedBy",
        "submittedDt"
      ],
      "properties": {
        "documentType": {
          "type": "string",
          "description": "Document type",
          "enum": [
            "Passport",
            "EMID",
            "TradeLicenseNo",
            "MOA",
            "Visa",
            "Others"
          ]
        },
        "signatoryId": {
          "type": "string",
          "description": "aka stakeholders documents"
        },
        "signatoryName": {
          "type": "string",
          "description": "name of the stakeholder"
        },
        "documentTitle": {
          "type": "string",
          "description": "same as filename",
          "pattern": "^[a-zA-Z0-9. ]*$"
        },
        "documentKey": {
          "type": "string",
          "description": "document key is used to store the file in S3"
        },
        "fileName": {
          "type": "string",
          "description": "file Name with extension",
          "pattern": "^[a-zA-Z0-9. ]*$"
        },
        "filePath": {
          "type": "string",
          "description": "File Path of the uploaded documents on the server",
          "pattern": "^[a-zA-Z0-9.\\\\ ]*$"
        },
        "url": {
          "type": "string",
          "description": "File Path of the uploaded documents on the server",
          "pattern": "^[a-zA-Z0-9.\\\\ ]*$"
        },
        "fileData": {
          "type": "string",
          "format": "application/data",
          "description": "this will be optional for get documents by prospectId operation"
        },
        "fileFormat": {
          "type": "string",
          "description": "Document MIME types/format",
          "enum": [
            "application/pdf",
            "image/png",
            "image/jpeg"
          ]
        },
        "fileSize": {
          "type": "integer",
          "description": "File size (in kBs) of the uploaded documents on the server",
          "pattern": "^[0-9]*$"
        },
        "fileDescription": {
          "type": "string",
          "description": "File description of the uploaded documents on the server",
          "pattern": "^[a-zA-Z0-9 ]*$"
        },
        "submittedBy": {
          "type": "string",
          "maxLength": 65,
          "pattern": "^[a-zA-Z0-9.]*$"
        },
        "submittedDt": {
          "type": "string",
          "format": "datetime"
        },
        "updatedBy": {
          "type": "string",
          "maxLength": 65,
          "pattern": "^[a-zA-Z0-9.]*$"
        },
        "updatedDt": {
          "type": "string",
          "format": "datetime"
        },
        "avsCheckDt": {
          "type": "string",
          "description": "Anti Virus Scan check date",
          "format": "datetime"
        },
        "avsCheck": {
          "type": "boolean",
          "description": "Anti Virus Scan check done?",
          "default": false
        },
        "verified": {
          "type": "boolean",
          "default": false
        },
        "verifiedBy": {
          "type": "string",
          "description": "OPS Team Verifier ID of the document",
          "pattern": "^[a-zA-Z ]*$"
        },
        "isEncrypted": {
          "type": "boolean",
          "description": "Indicates whether the file uploaded is an encrypted file or not",
          "default": false
        },
        "required": {
          "type": "boolean",
          "description": "Indicates whether the file is required or optional",
          "default": true
        },
        "encryptionDetails": {
          "type": "string",
          "description": "Specifies the encryption details",
          "pattern": "^[a-zA-Z0-9.\\- ]*$"
        },
        "uploadStatus": {
          "type": "string",
          "default": "NotUploaded",
          "enum": [
            "Uploaded",
            "Reuploaded",
            "NotUploaded"
          ]
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "errorType": {
          "type": "string",
          "enum": [
            "FieldsValidation",
            "OTP",
            "Other"
          ]
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "fieldPath": {
                "type": "string"
              },
              "errorCode": {
                "type": "string"
              },
              "errorType": {
                "type": "string",
                "enum": [
                  "mandatory",
                  "invalid"
                ]
              },
              "message": {
                "type": "string"
              },
              "developerText": {
                "type": "string",
                "description": "pattern, maxlength, min, max etc used for invalid fields "
              }
            }
          }
        }
      }
    }
  }
}