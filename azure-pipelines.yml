# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(BuildID)_$(Date:yyyyMMdd)$(Rev:.rr)

pr:
  branches:
    include:
      - develop
      - release

trigger:
  - develop
  - release
#  - releases/*

jobs:
    - job: Webapply
      timeoutInMinutes: 120
      condition: and(succeeded(),eq(variables.Webapply, 'True'))
      pool:
        vmImage: 'macos-latest'
      steps:
      - task: NodeTool@0
        displayName: 'Use Node 14.x'
        inputs:
          versionSpec: 14.x
      - bash: |
          echo "registry=https://pkgs.dev.azure.com/softwarelicense/505d78ca-5ab9-4415-bd14-9ad67f816ed9/_packaging/rakbank/npm/registry/" >> webapply/.npmrc
          echo "always-auth=true" >> webapply/.npmrc
        displayName: 'Set Registry in .npmrc'

      - task: npmAuthenticate@0
        inputs:
          workingFile: 'webapply/.npmrc'   

      - bash: |
           echo "##vso[task.setvariable variable=env_to_deploy;]develop"
           echo "##vso[task.setvariable variable=PkgBuild;]True"
        displayName: 'Building Develop Package'
        enabled: true
        #condition: contains(variables['build.sourceBranch'], 'develop')
        condition: and(succeeded(), or(ne(variables['Build.SourceBranch'], 'refs/heads/release'),ne(variables['Build.SourceBranch'], 'refs/heads/replica'), ne(variables['Build.SourceBranch'], 'refs/heads/master')))

      - bash: |
           echo "##vso[task.setvariable variable=env_to_deploy;]release"
           echo "##vso[task.setvariable variable=PkgBuild;]True"
        displayName: 'Building release Package'
        enabled: true
        condition: and(succeeded(),eq(variables['build.sourceBranch'], 'refs/heads/release'))

      - bash: |
           echo "##vso[task.setvariable variable=env_to_deploy;]replica"
           echo "##vso[task.setvariable variable=PkgBuild;]True"
        displayName: 'Building replica Package'
        enabled: true
        condition: and(succeeded(),eq(variables['build.sourceBranch'], 'refs/heads/replica'))

      - bash: |
           echo "##vso[task.setvariable variable=env_to_deploy;]prod"
           echo "##vso[task.setvariable variable=PkgBuild;]True"
        displayName: 'Building Production Package'
        enabled: true
        condition: and(succeeded(),eq(variables['build.sourceBranch'], 'refs/heads/master'))

      - bash: |
          sh set-endpoint-and-recaptcha.sh $(env_to_deploy)
        displayName: 'Set $(env_to_deploy) Endpoint and Recaptcha status in .env.production file'
        condition: and(succeeded(),eq(variables.PkgBuild, 'True'))
      - bash : |
          cd webapply
          npm cache clean
          npm install --verbose
          npm run build
        env:
          REACT_APP_RECAPTCHA_NOT_ROBOT_PUBLIC_KEY: $(REACT_APP_RECAPTCHA_NOT_ROBOT_PUBLIC_KEY)
        displayName: 'Buildling webapply Application'
        enabled: true
      - bash : |
          cd webapply
          #npm install redux-mock-store --save-dev
          npm test
        displayName: 'Unit Test cases'
        enabled: false

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFiles: coverage/index.html
          failTaskOnFailedTests: true
        condition: succeededOrFailed()
        enabled: false

      - task: PublishCodeCoverageResults@1
        displayName: Publish Code Coverage Results
        inputs:
          codeCoverageTool: cobertura
          summaryFileLocation: $(Build.SourcesDirectory)/CoverageReports/Cobertura.xml
          reportDirectory: $(Build.SourcesDirectory)/CoverageReports
        condition: succeededOrFailed()
        enabled: false
      - task: CopyFiles@2
        displayName: 'Stage Artifacts'
        inputs:
          SourceFolder: webapply/build/
          TargetFolder: '$(build.artifactstagingdirectory)/webapply'
      - task: ArchiveFiles@2
        displayName: 'Archive web'
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/webapply/'
          archiveFile: '$(Build.ArtifactStagingDirectory)/webapply/webapply.zip'

# below is used for the publishing the artifacts to the jfrog artifactory 
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to Dev'
        #condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/webapply/*.zip",
                    "target": "onboarding/develop/$(Build.BuildNumber)/webapply/"
                }
              ]
            }
          collectBuildInfo: true

# below is used for the publishing the artifacts to the jfrog artifactory 
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to UAT'
        condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/release'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/webapply/*.zip",
                    "target": "onboarding/release/$(Build.BuildNumber)/webapply/"
                }
              ]
            }
          collectBuildInfo: true
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to replica'
        condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/replica'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/webapply/*.zip",
                    "target": "onboarding/replica/$(Build.BuildNumber)/webapply/"
                }
              ]
            }
          collectBuildInfo: true

      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to PROD'
        condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/webapply/*.zip",
                    "target": "onboarding/master/$(Build.BuildNumber)/webapply/"
                }
              ]
            }
          collectBuildInfo: true
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-publish-build-info.ArtifactoryPublishBuildInfo@1
        displayName: 'Publish Build Info to Artifactory'
        inputs:
          artifactoryService: 'Jfrog'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Build Artifacts'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/webapply'
          ArtifactName: 'Webapply'

    - job: WebapplyServer
      timeoutInMinutes: 120
      condition: and(succeeded(),eq(variables.WebapplyServer, 'True'))
      pool:
        vmImage: 'macos-latest'
      steps:
      - task: NodeTool@0
        displayName: 'Use Node 14.x'
        inputs:
          versionSpec: 14.x

      - bash : |
          cd webapplyserver
          mvn clean
          mvn install
        displayName: 'Buildling webapplyServer Application'
        enabled: true
      - task: CopyFiles@2
        displayName: 'Stage Artifacts'
        inputs:
          SourceFolder: webapplyserver/target/
          TargetFolder: '$(build.artifactstagingdirectory)/webapplyserver'
      - task: ArchiveFiles@2
        displayName: 'Archive web'
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/webapplyserver/'
          archiveFile: '$(Build.ArtifactStagingDirectory)/webapplyserver/webapplyServer.war'

# below is used for the publishing the artifacts to the jfrog artifactory 
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to Dev'
        condition: and(succeeded(),eq(variables.env_to_deploy, 'develop'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/webapplyserver/*.war",
                    "target": "onboarding/develop/$(Build.BuildNumber)/webapplyServer/"
                }
              ]
            }
          collectBuildInfo: true

# below is used for the publishing the artifacts to the jfrog artifactory 
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to UAT'
        condition: and(succeeded(),eq(variables.env_to_deploy, 'release'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/webapplyserver/*.war",
                    "target": "onboarding/release/$(Build.BuildNumber)/webapplyServer/"
                }
              ]
            }
          collectBuildInfo: true
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to replica'
        condition: and(succeeded(),eq(variables.env_to_deploy, 'replica'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/webapplyserver/*.war",
                    "target": "onboarding/replica/$(Build.BuildNumber)/webapplyServer/"
                }
              ]
            }
          collectBuildInfo: true

      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to production'
        condition: and(succeeded(),eq(variables.env_to_deploy, 'prod'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/webapplyserver/*.war",
                    "target": "onboarding/master/$(Build.BuildNumber)/webapplyServer/"
                }
              ]
            }
          collectBuildInfo: true

      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-publish-build-info.ArtifactoryPublishBuildInfo@1
        displayName: 'Publish Build Info to Artifactory'
        inputs:
          artifactoryService: 'Jfrog'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Build Artifacts'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/webapplyserver'
          ArtifactName: 'WebapplyServer'
      - bash: |
          npm i -g slack-cli
          echo "=====================The new Onboarding build is available for testing:=========== " > release-notes.txt
          echo -e "\n" >> release-notes.txt
          echo " Release (UAT) with the Build ID: $BUILD_ID " >> release-notes.txt
          echo -e "\n" >> release-notes.txt
          echo -e "Changelog:" >> release-notes.txt
          echo -e "\n" >> release-notes.txt
          GITLOG=`git log --merges --since="1.days.ago" --pretty="Commit-id: %h - By : %an, %ar : %s\n" `
          echo -e $GITLOG >> release-notes.txt
          echo -e "The files are :\n" >> release-notes.txt
          git diff --stat $(git describe --tags --abbrev=0)..HEAD >> release-notes.txt
          slackcli -h "co-releasenotes" -e :checkered_flag: -t $(SLACK_TOKEN) -u "Slackbot" -m "`cat release-notes.txt`"
          echo -e "================END===================\n" >> release-notes.txt
        env:
          BUILD_NUMBER: $(Build.BuildNumber)
          BUILD_ID: $(Build.BuildId)
        displayName: 'Create release-notes notification'
        condition: and(succeeded(),eq(variables.env_to_deploy, 'release'))
        
    - job: document_uploader
      timeoutInMinutes: 120
      condition: and(succeeded(),eq(variables.Document_Uploader, 'True'))
      pool:
        vmImage: 'macos-latest'
      steps:
      - task: NodeTool@0
        displayName: 'Use Node 14.x'
        inputs:
          versionSpec: 14.x

      - bash : |
          cd document_uploader
          mvn clean
          mvn clean install
        displayName: 'Buildling Document Uploader Application'
        enabled: true
      
      - bash : |
          cd document_uploader
          mvn clean test -Dtest=ae.rakbank.documentuploader.DocumentUploaderTest
        displayName: 'JUnit test cases'
        enabled: false
      - task: CopyFiles@2
        displayName: 'Stage Artifacts'
        inputs:
          SourceFolder: document_uploader/target/
          TargetFolder: '$(build.artifactstagingdirectory)/document_uploader'
      - task: ArchiveFiles@2
        displayName: 'Archive Document uploader file'
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/document_uploader/'
          archiveFile: '$(Build.ArtifactStagingDirectory)/document-uploader/*.war'

# below is used for the publishing the artifacts to the jfrog artifactory 
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to Dev'
        condition: and(succeeded(),eq(variables.env_to_deploy, 'develop'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/document_uploader/*.war",
                    "target": "onboarding/develop/$(Build.BuildNumber)/document_uploader/"
                }
              ]
            }
          collectBuildInfo: true

# below is used for the publishing the artifacts to the jfrog artifactory 
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to UAT'
        condition: and(succeeded(),eq(variables.env_to_deploy, 'release'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/document_uploader/*.war",
                    "target": "onboarding/release/$(Build.BuildNumber)/document_uploader/"
                }
              ]
            }
          collectBuildInfo: true

      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to replica'
        condition: and(succeeded(),eq(variables.env_to_deploy, 'replica'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/document_uploader/*.war",
                    "target": "onboarding/replica/$(Build.BuildNumber)/document_uploader/"
                }
              ]
            }
          collectBuildInfo: true

      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to prod'
        condition: and(succeeded(),eq(variables.env_to_deploy, 'prod'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/document_uploader/*.war",
                    "target": "onboarding/master/$(Build.BuildNumber)/document_uploader/"
                }
              ]
            }
          collectBuildInfo: true

      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-publish-build-info.ArtifactoryPublishBuildInfo@1
        displayName: 'Publish Build Info to Artifactory'
        inputs:
          artifactoryService: 'Jfrog'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Build Artifacts'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/document_uploader'
          ArtifactName: 'document_uploader'

    - job: SonarQube
      timeoutInMinutes: 120
      pool:
        vmImage: 'macOS-1015'
      dependsOn:
       - Webapply
      condition:
       #and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))  
       and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/release'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
      steps:
      - task: NodeTool@0
        displayName: 'Use Node 14.x'
        inputs:
          versionSpec: 14.x
      #prepare the Sonarqube for executing the sonar 
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'RAKBANKSonarCloud'
          organization: 'rakrepoadmin-github'
          scannerMode: 'CLI'
          configMode: 'file'

      #execute the sonar qube analyze in order to run the analyzes of the source code
      - task: SonarCloudAnalyze@1
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'