# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(BuildID)_$(Date:yyyyMMdd)$(Rev:.rr)

pr:
  branches:
    include:
      - develop
#trigger: none
trigger:
  - develop
#  - releases/*

jobs:
    - job: Webapply
      timeoutInMinutes: 120
      pool:
       name: Hosted macOS
#      demands:
#        - java
#        - JDK
      steps:
      - task: NodeTool@0
        displayName: 'Use Node 10.x'
        inputs:
          versionSpec: 10.x

      - bash : |
          cd webapply
          npm install
          PUBLIC_URL=/quickapply npm run build
        env:
          REACT_APP_RECAPTCHA_NOT_ROBOT_PUBLIC_KEY: $(REACT_APP_RECAPTCHA_NOT_ROBOT_PUBLIC_KEY)
        displayName: 'Buildling webapply Application'
        enabled: true

      - task: CopyFiles@2
        displayName: 'Stage Artifacts'
        inputs:
          SourceFolder: webapply/build/
          TargetFolder: '$(build.artifactstagingdirectory)/webapply'
      - task: ArchiveFiles@2
        displayName: 'Archive web'
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/webapply/'
          archiveFile: '$(Build.ArtifactStagingDirectory)/webapply/webapply.zip'

# below is used for the publishing the artifacts to the jfrog artifactory 
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload'
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/webapply/*.zip",
                    "target": "onboarding/$(Build.BuildNumber)/webapply/"
                }
              ]
            }
          collectBuildInfo: true
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-publish-build-info.ArtifactoryPublishBuildInfo@1
        displayName: 'Publish Build Info to Artifactory'
        inputs:
          artifactoryService: 'Jfrog'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Build Artifacts'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/webapply'
          ArtifactName: 'Webapply'
    - job: WebapplyServer
      pool:
       name: Hosted macOS
      steps:
      - task: NodeTool@0
        displayName: 'Use Node 10.x'
        inputs:
          versionSpec: 10.x

      - bash : |
          cd webapplyserver
          mvn clean
          mvn clean install
        displayName: 'Buildling webapplyServer Application'
        enabled: true
      - task: CopyFiles@2
        displayName: 'Stage Artifacts'
        inputs:
          SourceFolder: webapplyserver/target/
          TargetFolder: '$(build.artifactstagingdirectory)/webapplyserver'
      - task: ArchiveFiles@2
        displayName: 'Archive web'
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/webapplyserver/'
          archiveFile: '$(Build.ArtifactStagingDirectory)/webapplyserver/webapplyServer.war'

# below is used for the publishing the artifacts to the jfrog artifactory 
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload'
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/webapplyserver/*.war",
                    "target": "onboarding/$(Build.BuildNumber)/webapplyServer/"
                }
              ]
            }
          collectBuildInfo: true
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-publish-build-info.ArtifactoryPublishBuildInfo@1
        displayName: 'Publish Build Info to Artifactory'
        inputs:
          artifactoryService: 'Jfrog'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Build Artifacts'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/webapplyserver'
          ArtifactName: 'WebapplyServer'
          
    - job: document_uploader
      pool:
       name: Hosted macOS
      steps:
      - task: NodeTool@0
        displayName: 'Use Node 10.x'
        inputs:
          versionSpec: 10.x

      - bash : |
          cd document_uploader
          mvn clean
          mvn clean install
        displayName: 'Buildling Document Uploader Application'
        enabled: true
      - task: CopyFiles@2
        displayName: 'Stage Artifacts'
        inputs:
          SourceFolder: document_uploader/target/
          TargetFolder: '$(build.artifactstagingdirectory)/document_uploader'
      - task: ArchiveFiles@2
        displayName: 'Archive Document uploader file'
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/document_uploader/'
          archiveFile: '$(Build.ArtifactStagingDirectory)/document-uploader/*.war'

# below is used for the publishing the artifacts to the jfrog artifactory 
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload'
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/document_uploader/*.war",
                    "target": "onboarding/$(Build.BuildNumber)/document_uploader/"
                }
              ]
            }
          collectBuildInfo: true
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-publish-build-info.ArtifactoryPublishBuildInfo@1
        displayName: 'Publish Build Info to Artifactory'
        inputs:
          artifactoryService: 'Jfrog'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Build Artifacts'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/document_uploader'
          ArtifactName: 'document_uploader'

    - job: SonarQube
      dependsOn:
       - Webapply
      condition:
       and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))  
      pool:
       name: Hosted macOS
      steps:
      #prepare the Sonarqube for executing the sonar 
      - task: SonarQubePrepare@4
        inputs:
          SonarQube: 'sonarqube'
          scannerMode: 'CLI'
          configMode: 'file'
      #execute the sonar qube analyze in order to run the analyzes of the source code
      - task: SonarQubeAnalyze@4
      # publish the sonar report
      - task: SonarQubePublish@4
        inputs:
          pollingTimeoutSec: '300'
      - task: PowerShell@2
        displayName: 'SonarQube Quality Gate status'
        inputs:
          filePath: 'webapply/get-sonarqube-quality-gate-status.ps1'
          arguments: '-SonarServerName "http://104.211.240.147:9000/" -SonarProjectKey "onboarding_webapply" -SonarToken "d8c342584b463b68af3864c244f404440bdbfaf1"'
        enabled: false