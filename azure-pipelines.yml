# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(BuildID)_$(Date:yyyyMMdd)$(Rev:.rr)

pr:
  branches:
    include:
      - bbg2.0/develop

trigger:
  branches:
    include:
      - bbg2.0/develop
    exclude:
      - develop

variables:
  - group: 'onboarding_variables'

jobs:
    - job: Webapply
      timeoutInMinutes: 120
      condition: and(succeeded(),eq(variables.Webapply, 'True'))
      pool:
        vmImage: 'macos-latest'
      steps:
      - task: NodeTool@0
        displayName: 'Use Node 14.x'
        inputs:
          versionSpec: 14.x
      - bash: |
          echo "registry=https://pkgs.dev.azure.com/softwarelicense/505d78ca-5ab9-4415-bd14-9ad67f816ed9/_packaging/rakbank/npm/registry/" >> webapply/.npmrc
          echo "always-auth=true" >> webapply/.npmrc
        displayName: 'Set Registry in .npmrc'

      - task: npmAuthenticate@0
        inputs:
          workingFile: 'webapply/.npmrc'   

      - bash: |
           echo "##vso[task.setvariable variable=env_to_deploy;]develop"
           echo "##vso[task.setvariable variable=PkgBuild;]True"
        displayName: 'Building Develop Package'
        enabled: true
        condition: contains(variables['build.sourceBranch'], 'refs/heads/bbg2.0/develop')
        #condition: and(succeeded(), or(ne(variables['Build.SourceBranch'], 'refs/heads/release'),ne(variables['Build.SourceBranch'], 'refs/heads/replica'), ne(variables['Build.SourceBranch'], 'refs/heads/master')))

      - bash: |
           echo "##vso[task.setvariable variable=env_to_deploy;]release"
           echo "##vso[task.setvariable variable=PkgBuild;]True"
        displayName: 'Building release Package'
        enabled: true
        condition: and(succeeded(),eq(variables['build.sourceBranch'], 'refs/heads/bbg2.0/release'))

      - bash: |
           echo "##vso[task.setvariable variable=env_to_deploy;]new_uat"
           echo "##vso[task.setvariable variable=PkgBuild;]True"
        displayName: 'Building release Package'
        enabled: true
        condition: and(succeeded(),and(eq(variables['build.sourceBranch'], 'refs/heads/bbg2.0/release'),eq(variables.new_uat_build, 'True')))      

      - bash: |
           echo "##vso[task.setvariable variable=env_to_deploy;]replica"
           echo "##vso[task.setvariable variable=PkgBuild;]True"
        displayName: 'Building replica Package'
        enabled: true
        condition: and(succeeded(),eq(variables['build.sourceBranch'], 'refs/heads/bbg2.0/replica'))

      - bash: |
           echo "##vso[task.setvariable variable=env_to_deploy;]prod"
           echo "##vso[task.setvariable variable=PkgBuild;]True"
        displayName: 'Building Production Package'
        enabled: true
        condition: and(succeeded(),eq(variables['build.sourceBranch'], 'refs/heads/bbg2.0/master'))

      - bash: |
          sh set-endpoint-and-recaptcha.sh $(env_to_deploy)
        displayName: 'Set $(env_to_deploy) Endpoint and Recaptcha status in .env.production file'
        condition: and(succeeded(),eq(variables.PkgBuild, 'True'))

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            username='$(username)'
            pat='$(pr_pat_token)'
            Projectname=Onboarding
            repo_name=Onboarding
            branchname='$(Build.SourceBranch)'

            mkdir releasenote
            PRID=$(curl -s -L -u $username:$pat "https://dev.azure.com/softwarelicense/$Projectname/_apis/git/repositories/$repo_name/pullrequests?searchCriteria.status=completed&searchCriteria.targetRefName=$branchname&api-version=6.1" | jq -r '.value[].pullRequestId' | head -1)
            echo "making the change logs for the pull request id : $PRID"
            TitleName=$(curl -s -L -u $username:$pat "https://dev.azure.com/softwarelicense/$Projectname/_apis/git/repositories/$repo_name/pullrequests/$PRID?api-version=6.1" | jq -r '.title')
            DATE=$(date +"%d/%m/%Y") > releasenote/release.txt
            echo "#1. $DATE -- $(Build.BuildNumber)" >> releasenote/release.txt
            echo "-------------------------------------" >> releasenote/release.txt
            echo "$TitleName" >> releasenote/release.txt
            response=$(curl -s -L -u $username:$pat "https://dev.azure.com/softwarelicense/$Projectname/_apis/git/repositories/$repo_name/pullrequests/$PRID/commits?api-version=6.1")
            fix=$(echo "$response" | jq -r '.value[] | select(.comment | startswith("fix:")) | .comment' | awk '{print NR ". " substr($0, 5)}')
            break_change=$(echo "$response" | jq -r '.value[] | select(.comment | startswith("BreakChange:")) | .comment' | awk '{print NR ". " substr($0, 14)}')
            feat=$(echo "$response" | jq -r '.value[] | select(.comment | startswith("feat:")) | .comment' | awk '{print NR ". " substr($0, 7)}')
            changes=$(echo "$response" | jq -r '.value[] | select((.comment | startswith("fix:")) or (.comment | startswith("BreakChange:")) or (.comment | startswith("feat:")) | not) | .comment' | awk '{print NR ". " $0}')
            if [[ -n "$fix" ]]; then
              echo -e "+ **fix:** \n\n$fix\n" >> releasenote/release.txt
            fi
            if [[ -n "$break_change" ]]; then
              echo -e "+ **BreakChange:** \n\n$break_change\n" >> releasenote/release.txt
            fi
            if [[ -n "$feat" ]]; then
              echo -e "+ **feat:** \n\n$feat\n" >> releasenote/release.txt
            fi
            if [[ -n "$changes" ]]; then
              echo -e "+ **Changes:** \n\n$changes\n" >> releasenote/release.txt
            fi            
            echo "================Final Release/change log is : ============"      
            cat releasenote/release.txt
        displayName: 'Change_log Genaration'

        
      - bash : |
          cd webapply
          npm cache clean
          npm install --verbose
          npm run build
          cd ./build
          echo "############### Before ############### "
          cat index.html
          touch copy.html
          awk '{gsub("</body>", "<script type=\"text/javascript\">console.log(\"Build Version:\", $(Build.BuildId))</script></body>"); print}' index.html > copy.html
          cp copy.html index.html
          echo "############### After ############### "
          cat index.html
        env:
          REACT_APP_RECAPTCHA_NOT_ROBOT_PUBLIC_KEY: $(REACT_APP_RECAPTCHA_NOT_ROBOT_PUBLIC_KEY)
        displayName: 'Buildling webapply Application'
        enabled: true

      - bash : |
          cd webapply
          #npm install redux-mock-store --save-dev
          npm test
        displayName: 'Unit Test cases'
        enabled: false

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFiles: coverage/index.html
          failTaskOnFailedTests: true
        condition: succeededOrFailed()
        enabled: false

      - task: PublishCodeCoverageResults@1
        displayName: Publish Code Coverage Results
        inputs:
          codeCoverageTool: cobertura
          summaryFileLocation: $(Build.SourcesDirectory)/CoverageReports/Cobertura.xml
          reportDirectory: $(Build.SourcesDirectory)/CoverageReports
        condition: succeededOrFailed()
        enabled: false
      - task: CopyFiles@2
        displayName: 'Stage Artifacts'
        inputs:
          SourceFolder: webapply/build/
          TargetFolder: '$(build.artifactstagingdirectory)/webapply'
      - task: ArchiveFiles@2
        displayName: 'Archive web'
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/webapply/'
          archiveFile: '$(Build.ArtifactStagingDirectory)/webapply/webapply.zip'

      - task: CopyFiles@2
        displayName: 'Stage Artifacts'
        inputs:
          SourceFolder: releasenote/
          TargetFolder: '$(build.artifactstagingdirectory)/releasenote'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Build Artifacts'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/releasenote'
          ArtifactName: 'ReleaseNote'

# below is used for the publishing the artifacts to the jfrog artifactory  
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to Dev'
        condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/bbg2.0/develop'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/webapply/*.zip",
                    "target": "onboarding/DigitalBank/develop/$(Build.BuildNumber)/webapply/"
                },
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/releasenote/",
                    "target": "onboarding/DigitalBank/develop/$(Build.BuildNumber)/webapply/"
                }                
              ]
            }
          collectBuildInfo: true

# below is used for the publishing the artifacts to the jfrog artifactory 
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to UAT'
        condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/bbg2.0/release'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/webapply/*.zip",
                    "target": "onboarding/DigitalBank/release/$(Build.BuildNumber)/webapply/"
                },
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/releasenote/",
                    "target": "onboarding/DigitalBank/release/$(Build.BuildNumber)/webapply/"
                } 
              ]
            }
          collectBuildInfo: true
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to replica'
        condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/replica'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/webapply/*.zip",
                    "target": "onboarding/DigitalBank/replica/$(Build.BuildNumber)/webapply/"
                }
              ]
            }
          collectBuildInfo: true

      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload to PROD'
        condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          artifactoryService: 'Jfrog'
          fileSpec: |
            {
              "files": [
                {
                    "pattern": "$(Build.ArtifactStagingDirectory)/webapply/*.zip",
                    "target": "onboarding/DigitalBank/master/$(Build.BuildNumber)/webapply/"
                }
              ]
            }
          collectBuildInfo: true
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-publish-build-info.ArtifactoryPublishBuildInfo@1
        displayName: 'Publish Build Info to Artifactory'
        inputs:
          artifactoryService: 'Jfrog'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Build Artifacts'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/webapply'
          ArtifactName: 'Webapply'

    - job: SonarQube
      timeoutInMinutes: 120
      pool:
        vmImage: 'ubuntu-latest'
      dependsOn:
       - Webapply
      condition:
       #and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))  
       and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/bbg2.0/release'), eq(variables['Build.SourceBranch'], 'refs/heads/bbg2.0/develop')))
      steps:
      - task: NodeTool@0
        displayName: 'Use Node 16.x'
        inputs:
          versionSpec: 16.x
      #prepare the Sonarqube for executing the sonar 
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'RAKBANKSonarCloud'
          organization: 'rakrepoadmin-github'
          scannerMode: 'CLI'
          configMode: 'file'

      #execute the sonar qube analyze in order to run the analyzes of the source code
      - task: SonarCloudAnalyze@1
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'