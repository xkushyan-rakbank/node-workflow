# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(BuildID)_$(Date:yyyyMMdd)$(Rev:.rr)

pr:
  branches:
    include:
      - develop
trigger: none
#trigger:
#  - develop
#  - releases/*
jobs:
    - job: Webapply
      timeoutInMinutes: 120
      pool:
       name: Hosted macOS
#      demands:
#        - java
#        - JDK
      steps:
      - task: NodeTool@0
        displayName: 'Use Node 10.x'
        inputs:
          versionSpec: 10.x

      - bash : |
          cd webapply
          npm install
          npm run build
        displayName: 'Buildling webapply Application'
        enabled: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Build Artifacts'
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/webapply/build'
          ArtifactName: 'Webapply'
# below is used for the publishing the artifacts to the jfrog artifactory 
      - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-upload.ArtifactoryGenericUpload@1
        displayName: 'Artifactory Generic Upload'
        inputs:
          artifactoryService: Jfrog
          fileSpec: |
            {
              "files": [
                {
                  "pattern": "$(Build.ArtifactStagingDirectory)/webapply/build/*.zip",
                  "target": "onboarding/$(Build.BuildNumber)/Webapply/"
                }
              ]
            }
          collectBuildInfo: true
        enabled: true

    - job: SonarQube
      dependsOn:
       - Webapply
      condition:
       and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))  
      pool:
       name: Hosted macOS
      steps:
      #prepare the Sonarqube for executing the sonar 
      - task: SonarQubePrepare@4
        inputs:
          SonarQube: 'sonarqube'
          scannerMode: 'CLI'
          configMode: 'file'
      #execute the sonar qube analyze in order to run the analyzes of the source code
      - task: SonarQubeAnalyze@4
      # publish the sonar report
      - task: SonarQubePublish@4
        inputs:
          pollingTimeoutSec: '300'
      - task: PowerShell@2
        displayName: 'Check Sonar Quality Gate'
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
            
            $token = [System.Text.Encoding]::UTF8.GetBytes($env:SonarToken + ":")
            $base64 = [System.Convert]::ToBase64String($token)
             
            $basicAuth = [string]::Format("Basic {0}", $base64)
            $headers = @{ Authorization = $basicAuth }
             
            $result = Invoke-RestMethod -Method Get -Uri http://alegrisource.westeurope.cloudapp.azure.com/api/qualitygates/project_status?projectKey=alegri-cockpit20 -Headers $headers
            $result | ConvertTo-Json | Write-Host
             
            if ($result.projectStatus.status -eq "OK") {
            Write-Host "Quality Gate Succeeded"
            }else{
            throw "Quality gate failed"
            }
        enabled: false