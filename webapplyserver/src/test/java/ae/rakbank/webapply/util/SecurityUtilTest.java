package ae.rakbank.webapply.util;

import org.apache.commons.codec.binary.Base64;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.security.GeneralSecurityException;
import java.security.Key;
import java.security.PrivateKey;

import static ae.rakbank.webapply.security.ReadWriteKey.PRIVATE_KEY_FILE;

public class SecurityUtilTest {
    static String textToDecrypt = "";
    static String xSymKey = "fUYUqIShtE79MABDb1DXbBdayqW/TE9dQ/RJvvvazvACf4U0LjMamy5Ti54UstOhsD1cuwLNSRA5dTKBh4MgQq6ResJfY0b0pVtIfhmP/SF/+5Fx2ZMpBoUBA67wPXBOM3oe8mQPv746sIdZGdS1gBNWIaUs5W4CX+F9dkUSmfQ=";
    static String symKey = "Ux37tCQH07JNBv8YwfMxiA==";


    private SecurityUtil su;

    @Before
    public void init() {
       su = new SecurityUtil();
    }

    @Test
    public void testDecryptSymmetric() {
        //SecretKeySpec keySpec = su.getSecretKeySpec(symKey.getBytes());
        SecretKeySpec keySpec = su.getSecretKeySpec(symKey.getBytes());

        byte[] decoded = su.decryptSymmetric(textToDecrypt, keySpec);

        String decodedString = String.valueOf(decoded);
        System.out.println(decodedString);

//        Assert.assertTrue(decodedString.contains("{"));
//        Assert.assertTrue(decodedString.contains("}"));
//        Assert.assertTrue(decodedString.contains(":"));

    }

    @Test
    public void testDecryptAssymetric() throws IOException, GeneralSecurityException, ClassNotFoundException {

        ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(PRIVATE_KEY_FILE));
        Key privateKey = (PrivateKey) inputStream.readObject();

        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        byte[] finalString = cipher.doFinal((Base64.decodeBase64(xSymKey)));
        System.out.println("Decrypted key =" + finalString);
    }
}
